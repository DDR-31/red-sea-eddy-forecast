import tensorflow as tf
from tensorflow.keras.layers import Input, ConvLSTM2D, BatchNormalization, Conv2D
from tensorflow.keras.models import Model
import os

# --- Konfigurasi Model ---
# Kita akan menggunakan 5 hari data...
N_TIME_STEPS = 5 
# ...untuk memprediksi 1 hari ke depan.

# Dimensi grid kita (dari file final_dataset.nc)
HEIGHT = 217
WIDTH = 145
# 4 channel input: sla, thetao, u10, v10
N_CHANNELS = 5

def build_convlstm_model(
    input_shape=(N_TIME_STEPS, HEIGHT, WIDTH, N_CHANNELS)
):
    """
    Membangun arsitektur model ConvLSTM.
    Input: (n_sampel, n_waktu, tinggi, lebar, n_channel)
    Output: (n_sampel, tinggi, lebar, 1) 
    """
    print(f"Membangun model dengan input shape: {input_shape}")
    
    # Definisikan input layer
    inputs = Input(shape=input_shape)

    # --- Jantung Model: Stacked ConvLSTM ---
    
    # Layer ConvLSTM pertama
    '''
    'return_sequences=True' berarti layer ini akan mengeluarkan output 
     untuk setiap timestep, untuk diteruskan ke layer berikutnya.
    '''
    x = ConvLSTM2D(
        filters=64,             # 64 filter konvolusi
        kernel_size=(3, 3),     # Ukuran filter 3x3
        padding='same',         # Pertahankan ukuran gambar
        return_sequences=True,
    )(inputs)
    x = BatchNormalization()(x) # Menstabilkan training

    # Layer ConvLSTM kedua
    '''
    'return_sequences=False' berarti layer ini HANYA mengeluarkan
    output dari timestep terakhir.
    '''
    x = ConvLSTM2D(
        filters=64,
        kernel_size=(3, 3),
        padding='same',
        return_sequences=False, # Hanya output di t=terakhir
    )(x)
    x = BatchNormalization()(x)

    # --- Output Layer ---
    # Kita perlu memprediksi peta 2D (tinggi, lebar) dengan 1 channel (sla).
    # Layer Conv2D 1x1 ini sempurna untuk "mengecilkan" 64 filter
    # dari layer sebelumnya menjadi 1 filter output.
    # Aktivasi 'linear' karena ini adalah masalah REGRESI (bukan klasifikasi).
    outputs = Conv2D(
        filters=1,              # 1 channel output (hanya sla)
        kernel_size=(1, 1),     # Filter 1x1
        activation='linear',    # Untuk regresi
        padding='same',
    )(x)

    # Gabungkan input dan output menjadi sebuah model
    model = Model(inputs=inputs, outputs=outputs)

    # Kompilasi model
    model.compile(
        optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
        loss='mse' # Mean Squared Error, standar untuk regresi
    )
    
    return model

if __name__ == "__main__":
    # Bagian ini hanya akan berjalan jika kamu menjalankan skrip ini secara langsung
    # Ini adalah "tes" untuk memastikan model kita berhasil dibuat
    
    print(">>> Melakukan tes pembangunan model...")
    model = build_convlstm_model()
    
    print("\nâœ… Sukses! Arsitektur model berhasil dibuat.")
    print("--- Ringkasan Model ---")
    model.summary()
    
    # Simpan ringkasan ke file
    PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
    REPORT_DIR = os.path.join(PROJECT_ROOT, 'reports')
    os.makedirs(REPORT_DIR, exist_ok=True)
    with open(os.path.join(REPORT_DIR, 'model_summary.txt'), 'w') as f:
        model.summary(print_fn=lambda x: f.write(x + '\n'))
    print(f"\nRingkasan model juga disimpan di: {REPORT_DIR}/model_summary.txt")
